#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <stddef.h>

#undef fread_unlocked
#undef fwrite_unlocked

#include "hash_tables.h"


void insert_sorted_node(shash_table_t *ht, shash_node_t *new_node);

/**
 * shash_table_create - Creates a sorted hash table
 * @size: The size of the array
 * Return: A pointer to the newly created hash table
 */
shash_table_t *shash_table_create(unsigned long int size)
{
shash_table_t *ht;
unsigned long int i;

ht = malloc(sizeof(shash_table_t));
if (ht == NULL)
return (NULL);

ht->size = size;
ht->array = malloc(sizeof(shash_node_t *) * size);
if (ht->array == NULL)
{
free(ht);
return (NULL);
}

for (i = 0; i < size; i++)
ht->array[i] = NULL;

ht->shead = NULL;
ht->stail = NULL;

return (ht);
}

/**
 * shash_table_set - Inserts or updates a key/value pair in a sorted hash table
 * @ht: The hash table
 * @key: The key string
 * @value: The value corresponding to the key
 * Return: 1 on success, 0 otherwise
 */
int shash_table_set(shash_table_t *ht, const char *key, const char *value)
{
unsigned long int index;
shash_node_t *node, *new_node;

if (ht == NULL || key == NULL || value == NULL)
return (0);

index = key_index((unsigned char *)key, ht->size);
node = ht->array[index];

while (node != NULL)
{
if (strcmp(node->key, key) == 0)
{
free(node->value);
node->value = strdup(value);
return (1);
}
node = node->next;
}

new_node = malloc(sizeof(shash_node_t));
if (new_node == NULL)
return (0);

new_node->key = strdup(key);
new_node->value = strdup(value);
new_node->next = ht->array[index];
ht->array[index] = new_node;
insert_sorted_node(ht, new_node);

return (1);
}

/**
 * shash_table_get - Retrieves value associated with key from sorted ht
 * @ht: The hash table
 * @key: The key to look for
 * Return: The value associated with the key, or NULL if not found
 */
char *shash_table_get(const shash_table_t *ht, const char *key)
{
unsigned long int index;
shash_node_t *node;

if (ht == NULL || key == NULL)
return (NULL);

index = key_index((unsigned char *)key, ht->size);
node = ht->array[index];

while (node != NULL)
{
if (strcmp(node->key, key) == 0)
return (node->value);
node = node->next;
}

return (NULL);
}

/**
 * shash_table_print - Prints a sorted hash table
 * @ht: The hash table to print
 */
void shash_table_print(const shash_table_t *ht)
{
shash_node_t *node;
int first = 1;

if (ht == NULL)
return;

printf("{");
node = ht->shead;
while (node != NULL)
{
if (!first)
printf(", ");
printf("'%s': '%s'", node->key, node->value);
first = 0;
node = node->snext;
}
printf("}\n");
}

/**
 * shash_table_print_rev - Prints a sorted hash table in reverse order
 * @ht: The hash table to print
 */
void shash_table_print_rev(const shash_table_t *ht)
{
shash_node_t *node;
int first = 1;

if (ht == NULL)
return;

printf("{");
node = ht->stail;
while (node != NULL)
{
if (!first)
printf(", ");
printf("'%s': '%s'", node->key, node->value);
first = 0;
node = node->sprev;
}
printf("}\n");
}

/**
 * shash_table_delete - Deletes a sorted hash table
 * @ht: The hash table to delete
 */
void shash_table_delete(shash_table_t *ht)
{
unsigned long int i;
shash_node_t *node, *temp;

if (ht == NULL)
return;

for (i = 0; i < ht->size; i++)
{
node = ht->array[i];
while (node != NULL)
{
temp = node;
node = node->next;
free(temp->key);
free(temp->value);
free(temp);
}
}
free(ht->array);
free(ht);
}

/**
 * insert_sorted_node - Inserts a node into sorted linked list of ht
 * @ht: The hash table
 * @new_node: The node to be inserted
 */
void insert_sorted_node(shash_table_t *ht, shash_node_t *new_node)
{
shash_node_t *node;

if (ht->shead == NULL)
{
ht->shead = new_node;
ht->stail = new_node;
new_node->sprev = NULL;
new_node->snext = NULL;
return;
}

node = ht->shead;

while (node != NULL)
{
if (strcmp(new_node->key, node->key) < 0)
{
new_node->sprev = node->sprev;
new_node->snext = node;

if (node->sprev != NULL)
node->sprev->snext = new_node;
else
ht->shead = new_node;

node->sprev = new_node;
return;
}
node = node->snext;
}

new_node->sprev = ht->stail;
new_node->snext = NULL;
ht->stail->snext = new_node;
ht->stail = new_node;
}
